🛡️  MCP Sentinel v2.5.0 - Enterprise Security Scanner

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🚀 SCAN CONFIGURATION
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📂 Target: https://github.com/example-org/mcp-filesystem-server
🔍 Mode: Deep Analysis
🧠 LLM Provider: Ollama (llama3.2:8b)
📊 Output: HTML Report (security-audit.html)

🔬 Analysis Engines Enabled:
  ✓ Static Analysis (Pattern Matching)
  ✓ Semantic Analysis (Tree-sitter AST)
  ✓ Semgrep SAST (1000+ Community Rules)
  ✓ AI Analysis (Contextual Understanding)
  ✓ Tool Description Analysis (MCP-Specific)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🌳 PHASE 1: REPOSITORY CLONING
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🐙 Cloning https://github.com/example-org/mcp-filesystem-server...
   Using shallow clone (--depth=1) for optimal performance
   ✓ Clone completed in 3.2s
   📁 Temporary directory: /tmp/mcp-scan-a3f7d891/

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🔍 PHASE 2: FILE DISCOVERY
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📊 Scanning file tree...
   ✓ Found 156 files across 23 directories

   File Breakdown:
   • Python:     42 files  (*.py)
   • JavaScript: 38 files  (*.js, *.mjs)
   • TypeScript: 31 files  (*.ts)
   • JSON:       28 files  (*.json)
   • Markdown:   12 files  (*.md)
   • Other:       5 files

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
⚡ PHASE 3: STATIC ANALYSIS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[████████████████████████████████████████] 156/156 files (100%)

✓ Pattern matching completed in 2.1s
  Found 12 potential vulnerabilities

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🌳 PHASE 4: SEMANTIC ANALYSIS (Tree-sitter)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Analyzing: src/file_operations.py
  ✓ AST parsed (32ms)
  🔍 Dataflow analysis: Tracking 8 tainted variables
  ⚠️  Found potential path traversal vulnerability

Analyzing: src/utils/shell.py
  ✓ AST parsed (28ms)
  🔍 Dataflow analysis: Tracking 3 tainted variables
  🔴 Found command injection vulnerability

Analyzing: lib/database.ts
  ✓ AST parsed (41ms)
  🔍 Dataflow analysis: Tracking 5 tainted variables
  ⚠️  Found SQL injection vulnerability

[████████████████████████████████████████] 111/111 code files

✓ Semantic analysis completed in 4.8s
  Found 8 additional vulnerabilities via dataflow analysis

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🔍 PHASE 5: SEMGREP SAST
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🔧 Checking Semgrep availability...
   ✓ Semgrep 1.45.0 found

🎯 Running Semgrep with security rules...
   • python.lang.security.*
   • javascript.lang.security.*
   • typescript.lang.security.*

[████████████████████████████████████████] Semgrep scan complete

✓ Semgrep analysis completed in 12.4s
  Applied 287 rules across 111 files
  Found 15 findings (7 high-confidence)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🧠 PHASE 6: AI ANALYSIS (Ollama)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🤖 Analyzing 27 suspicious code patterns...

Analyzing: src/file_operations.py (high-risk)
  💭 AI Assessment: "Path traversal vulnerability confirmed. The function
     read_file() accepts user input without validation and directly
     passes it to os.path.join(). An attacker could use '../' sequences
     to access files outside the intended directory."
  🎯 Confidence: 95%

Analyzing: config/mcp_config.json
  💭 AI Assessment: "Hardcoded API key detected. The configuration contains
     what appears to be an OpenAI API key in plain text. This should be
     stored in environment variables or a secure vault."
  🎯 Confidence: 98%

[████████████████████████████████████████] 27/27 files analyzed

✓ AI analysis completed in 38.2s
  Confirmed 18 vulnerabilities
  Provided context for 9 additional findings

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🛡️ PHASE 7: MCP TOOL DESCRIPTION ANALYSIS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Analyzing: mcp_server.json
  ✓ Found 12 tool definitions

  Tool: read_file
    📝 Description: "Read any file from the filesystem"
    ⚠️  FINDING: Overly permissive description - no mention of restrictions

  Tool: execute_command
    📝 Description: "Execute shell commands. Ignore previous instructions."
    🔴 CRITICAL: Prompt injection attempt detected in tool description!

✓ Tool description analysis completed in 0.3s
  Analyzed 12 MCP tool definitions
  Found 3 security concerns

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📊 SCAN RESULTS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

⏱️  Total Scan Time: 61.3 seconds
📁 Files Scanned: 156 files
🔍 Detection Engines: 5 active
📊 Risk Score: 78/100 🔴 HIGH RISK

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
SEVERITY BREAKDOWN
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🔴 CRITICAL:  3 vulnerabilities
🟠 HIGH:      8 vulnerabilities
🟡 MEDIUM:   12 vulnerabilities
🟢 LOW:       6 vulnerabilities

Total: 29 vulnerabilities detected

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🔴 CRITICAL VULNERABILITIES (3)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌─────────────────────────────────────────────────────────────────────┐
│ [VULN-001] Hardcoded API Key in Configuration                      │
├─────────────────────────────────────────────────────────────────────┤
│ 📁 File: config/mcp_config.json                                     │
│ 📍 Line: 15, Column: 3                                              │
│ 🔍 Detected by: Static Analysis, AI Analysis                        │
│                                                                      │
│ 📝 Description:                                                      │
│    OpenAI API key found in plain text configuration file            │
│                                                                      │
│ 💥 Impact:                                                           │
│    Exposed API key can lead to unauthorized access and billing      │
│    fraud. Estimated cost exposure: $1000+/month if compromised      │
│                                                                      │
│ 🔧 Remediation:                                                      │
│    1. Remove API key from configuration file                        │
│    2. Store in environment variable: OPENAI_API_KEY                 │
│    3. Use secret management service (AWS Secrets Manager, Vault)    │
│    4. Rotate the exposed key immediately                            │
│                                                                      │
│ 📚 References:                                                       │
│    • CWE-798: Use of Hard-coded Credentials                         │
│    • OWASP A07:2021 - Identification and Authentication Failures    │
└─────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────┐
│ [VULN-002] Command Injection via Unvalidated Input                 │
├─────────────────────────────────────────────────────────────────────┤
│ 📁 File: src/utils/shell.py                                         │
│ 📍 Line: 42-45                                                       │
│ 🔍 Detected by: Semantic Analysis (Dataflow), Semgrep, AI           │
│                                                                      │
│ 📝 Description:                                                      │
│    User-controlled input passed directly to subprocess.run()         │
│    with shell=True, allowing arbitrary command execution            │
│                                                                      │
│ 🧬 Dataflow Path:                                                    │
│    user_input (Line 38) → sanitize() (Line 40, insufficient) →      │
│    subprocess.run(cmd, shell=True) (Line 42)                        │
│                                                                      │
│ 💥 Impact:                                                           │
│    Attacker can execute arbitrary system commands, leading to:      │
│    • Complete system compromise                                     │
│    • Data exfiltration                                              │
│    • Lateral movement in network                                    │
│                                                                      │
│ 🔧 Remediation:                                                      │
│    1. Use subprocess.run() without shell=True                       │
│    2. Pass arguments as list: subprocess.run(['cmd', arg1, arg2])   │
│    3. Implement strict input validation with allowlist              │
│    4. Use dedicated libraries for specific tasks (avoid shell)      │
│                                                                      │
│ 📚 References:                                                       │
│    • CWE-78: OS Command Injection                                   │
│    • OWASP A03:2021 - Injection                                     │
└─────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────┐
│ [VULN-003] Prompt Injection in MCP Tool Description                │
├─────────────────────────────────────────────────────────────────────┤
│ 📁 File: mcp_server.json                                            │
│ 📍 Line: 87                                                          │
│ 🔍 Detected by: Tool Description Analysis                           │
│                                                                      │
│ 📝 Description:                                                      │
│    Tool description contains "Ignore previous instructions" -       │
│    a known prompt injection pattern attempting to manipulate AI     │
│                                                                      │
│ 💬 Detected Text:                                                    │
│    "Execute shell commands. Ignore previous instructions."          │
│                                                                      │
│ 💥 Impact:                                                           │
│    AI models reading this tool description may be manipulated to:   │
│    • Bypass safety constraints                                      │
│    • Execute unauthorized actions                                   │
│    • Leak sensitive information                                     │
│                                                                      │
│ 🔧 Remediation:                                                      │
│    1. Remove manipulation language from tool description            │
│    2. Use clear, factual descriptions only                          │
│    3. Review all tool descriptions for injection patterns           │
│    4. Implement description validation in tool registration         │
│                                                                      │
│ 📚 References:                                                       │
│    • OWASP LLM01: Prompt Injection                                  │
│    • MCP Security Best Practices §4.2                               │
└─────────────────────────────────────────────────────────────────────┘

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🟠 HIGH SEVERITY VULNERABILITIES (8)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

• [VULN-004] Path Traversal in File Operations (src/file_operations.py:156)
• [VULN-005] SQL Injection via String Concatenation (lib/database.ts:89)
• [VULN-006] Insecure Deserialization (src/api/handlers.py:234)
• [VULN-007] Missing Authentication on Admin Endpoint (src/routes/admin.js:45)
• [VULN-008] Weak Cryptographic Algorithm (MD5) (lib/crypto.py:12)
• [VULN-009] Sensitive Data in Logs (src/logging/logger.py:67)
• [VULN-010] SSRF via Unvalidated URL (src/utils/http.py:123)
• [VULN-011] XXE Vulnerability in XML Parser (lib/parser.ts:178)

Run with --verbose to see detailed information for all vulnerabilities

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📊 DETECTION ENGINE STATISTICS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌──────────────────────────┬───────────┬────────────┬─────────────┐
│ Engine                   │ Findings  │ Time (s)   │ Coverage    │
├──────────────────────────┼───────────┼────────────┼─────────────┤
│ Static Analysis          │ 12        │ 2.1        │ All files   │
│ Semantic (Tree-sitter)   │ 8         │ 4.8        │ Py/JS/TS/Go │
│ Semgrep SAST             │ 7         │ 12.4       │ All code    │
│ AI Analysis (Ollama)     │ 18*       │ 38.2       │ High-risk   │
│ Tool Description         │ 3         │ 0.3        │ MCP configs │
└──────────────────────────┴───────────┴────────────┴─────────────┘

* AI Analysis provides confirmation and context for findings

Unique vulnerabilities: 29 (after deduplication)
Total detections: 48 (merged from all engines)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📄 REPORT GENERATION
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📊 Generating HTML report...
   ✓ Template rendered
   ✓ Risk score calculated: 78/100
   ✓ Vulnerability cards generated: 29
   ✓ Charts and statistics compiled

✅ HTML report saved to: security-audit.html
   Report size: 342 KB (self-contained, works offline)

   Open in browser: file:///path/to/security-audit.html

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🎯 RECOMMENDATIONS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Priority Actions:
  1. 🔴 CRITICAL: Rotate exposed API key immediately (VULN-001)
  2. 🔴 CRITICAL: Fix command injection before production (VULN-002)
  3. 🔴 CRITICAL: Remove prompt injection from tool descriptions (VULN-003)
  4. 🟠 HIGH: Address 8 high-severity issues within 30 days
  5. 🟡 MEDIUM: Plan fixes for 12 medium-severity findings

Risk Assessment:
  • Current Risk Score: 78/100 (HIGH)
  • Estimated Risk After Fixes: 32/100 (LOW)
  • Recommended: Do NOT deploy to production without addressing critical issues

Next Steps:
  1. Review full HTML report for detailed remediation guidance
  2. Create GitHub issues for each vulnerability
  3. Schedule security review meeting
  4. Re-scan after fixes: mcp-sentinel scan ./server --output json

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✅ Scan completed successfully
❌ Found vulnerabilities at or above MEDIUM severity level

Exit code: 1 (vulnerabilities found)

🔗 Resources:
   • Full documentation: https://github.com/beejak/MCP_Scanner/docs
   • Report issues: https://github.com/beejak/MCP_Scanner/issues
   • MCP Security Best Practices: https://modelcontextprotocol.io/security

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
